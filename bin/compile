#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# START CONFIG
NGINX_VERSION=1.2.7
LIBICU_VERSION=50.1.2
LIBMCRYPT_VERSION=2.5.8
LIBMEMCACHED_VERSION=1.0.7
PHP_VERSION=5.4.12
NEWRELIC_VERSION=3.2.5.147
S3_BUCKET=hex-build
# END CONFIG

#
S3_URL="https://${S3_BUCKET}.s3.amazonaws.com"

MANIFEST_FILE="manifest.md5sum"
NGINX_FILE="nginx-${NGINX_VERSION}-heroku.tar.gz"
MCRYPT_FILE="libmcrypt-${LIBMCRYPT_VERSION}.tar.gz"
MEMCACHED_FILE="libmemcached-${LIBMEMCACHED_VERSION}.tar.gz"
ICU_FILE="libicu-${LIBICU_VERSION}.tar.gz"
PHP_FILE="php-${PHP_VERSION}-with-fpm-heroku.tar.gz"
NEWRELIC_FILE="newrelic-${NEWRELIC_VERSION}-heroku.tar.gz"

MANIFEST_URL="${S3_URL}/${MANIFEST_FILE}"
NGINX_URL="${S3_URL}/${NGINX_FILE}"
MCRYPT_URL="${S3_URL}/${MCRYPT_FILE}"
MEMCACHED_URL="${S3_URL}/${MEMCACHED_FILE}"
ICU_URL="${S3_URL}/${ICU_FILE}"
PHP_URL="${S3_URL}/${PHP_FILE}"
NEWRELIC_URL="${S3_URL}/${NEWRELIC_FILE}"
COMPOSER_URL="http://getcomposer.org/composer.phar"
#

#Paths
PHP_PATH="vendor/php"

# Sets the debug flag depending on Sf2 env (declared at the begeining of the file)
export SF_DEBUG="--no-debug"
export SF_ENV="prod"


#More variables
BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
BUNDLE_DIR="${CACHE_DIR}/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
export COMPOSER_HOME="${CACHE_DIR}/.composer"

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

function strip_slashes() {
  echo $(echo "$1" | sed -e "s/\//\\\\\//g")
}

function check_md5() {
	SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
	TARGET="$1"
	SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
	OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
	! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
	TARGET_URL="$1"
	curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

# package params: name tarball version url build_dir target
function install {
    echo "-----> Installing ${1} v${3}"
    if [ -f $2 ]
    then
            # check manifest
            if check_md5 $2
            then
                    echo "Bundling ${1} v${3}" | indent
                    echo ${4} | indent
                    download_url ${4}
            else
                    echo "Using cached ${1} v${3}" | indent
            fi
    else
            # fetch
            echo "Bundling ${1} v${3}" | indent
            echo $4 | indent
            download_url $4
    fi
    
    if [ ! -d $5 ]; then
        mkdir -p $5
    fi
    
    if [ ${2: -4} == ".bz2" ]
    then
    	tar xjf $2 -C $5
    else
        tar xzf $2 -C $5
    fi
}


# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR ${BUILD_DIR}/tmp $CACHE_DIR ${BUNDLE_DIR} ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${COMPOSER_HOME} ${BUILD_DIR}/.profile.d

pushd ${BUNDLE_DIR} > /dev/null

    if [ -n "`find . -type f -atime +30`" ]
    then
            echo "-----> Pruning Unused Cached Bundles"
            find . -type f -atime +30 -delete | indent
    fi

    echo "-----> Fetching Manifest"
    echo ${MANIFEST_URL} | indent
    download_url ${MANIFEST_URL}


    # Nginx name file version url target
    install "Nginx" $NGINX_FILE $NGINX_VERSION $NGINX_URL ${BUILD_DIR}/vendor/nginx

    # libmemcached
    install "libmemcached" $MEMCACHED_FILE $LIBMEMCACHED_VERSION $MEMCACHED_URL ${BUILD_DIR}/local

    # libmcrypt
    install "libmcrypt" $MCRYPT_FILE $LIBMCRYPT_VERSION $MCRYPT_URL ${BUILD_DIR}/local

    # libicu
    install "libicu" $ICU_FILE $LIBICU_VERSION $ICU_URL ${BUILD_DIR}/local


    # PHP
    install "PHP" $PHP_FILE $PHP_VERSION $PHP_URL ${BUILD_DIR}/${PHP_PATH}


    # newrelic
    install "New Relic" $NEWRELIC_FILE $NEWRELIC_VERSION $NEWRELIC_URL ${BUILD_DIR}/local
        
popd > /dev/null

# ---------------------------------------- Copying config files --------------------------------------
    # Php installation for bootstrap
    PHP_ROOT=${BUILD_DIR}/${PHP_PATH}
    PHP_INI=/app/${PHP_PATH}/php.ini
    EXEC_PHP=${BUILD_DIR}/${PHP_PATH}/bin/php

    echo "-----> Copying config files"
    cp $LP_DIR/conf/php-fpm.conf ${BUILD_DIR}/${PHP_PATH}/etc/php-fpm.conf
    cp ${BUILD_DIR}/${PHP_PATH}/php/fpm/status.html ${BUILD_DIR}/web/status.html
    cp $LP_DIR/conf/nginx.conf.erb ${BUILD_DIR}/vendor/nginx/conf/nginx.conf.erb
    if [ -r $LP_DIR/conf/fastcgi_params.erb ]; then
        cp $LP_DIR/conf/fastcgi_params.erb ${BUILD_DIR}/vendor/nginx/conf/fastcgi_params.erb
    fi
    cp $LP_DIR/conf/mime.types ${BUILD_DIR}/vendor/nginx/conf/mime.types
    cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

    cp -a $LP_DIR/conf/etc.d ${PHP_ROOT}/

    if [ -d $LP_DIR/conf/etc.d ]; then
        cp -f $LP_DIR/conf/etc.d/* ${PHP_ROOT}/etc.d/
    fi

# -------------------------- Hacking config files to get apc & memcached in cli ------------------------------


    # This is clearly a hack but it allows PHP to find its php.ini
    echo "---------> Adding a php.ini in ${PHP_ROOT} (hacky but needed)"
    if [ -f ${PHP_INI} ]; then
        echo "---------> A php.ini already exists in ${PHP_INI} so cannot apply the hack for our conf"
        exit 1
    fi;

    mkdir -p /app/${PHP_PATH}/
    mkdir -p ${PHP_ROOT}

    # Copying php.ini to php temporary installation
    # It solves datezone problem, possible others
    cp $LP_DIR/conf/php.ini ${PHP_INI}

    cat ${PHP_INI}|grep date.timezone

    # Deactivating plugins from php.ini (they won't be found)
    sed -i 's/extension=\(\w*\.so\)/;extension=\1/g' ${PHP_INI}

    # We need this to use PHP & APC or another caching system in Sf2 task when building assets...
    export LD_LIBRARY_PATH="${PHP_ROOT}/icu/lib:${BUILD_DIR}/local/lib:${PHP_ROOT}/ext:${LD_LIBRARY_PATH}"
    export PATH="${PHP_ROOT}/bin/:$PATH"


    echo "extension_dir=${PHP_ROOT}/lib/php/extensions/no-debug-non-zts-20100525" >> ${PHP_INI}
    echo "extension=apc.so" >> ${PHP_INI}
    echo "extension=memcache.so" >> ${PHP_INI}
    echo "extension=memcached.so" >> ${PHP_INI}
    echo "extension=mongo.so" >> ${PHP_INI}

    # Test for php.ini
    echo "-----> Ping php"
    if ${EXEC_PHP} -r "phpinfo();" | grep 'Configuration File'; then
            # Check if apc & memcache[d] are here
            echo 'Is memcache here ?'
            ${EXEC_PHP} -r "phpinfo();" | grep -i 'memcache support'
            echo 'Is memcached here ?'
            ${EXEC_PHP} -r "phpinfo();" | grep -i 'memcached support'
            echo 'Is apc here ?'
            ${EXEC_PHP} -r "phpinfo();" | grep -i 'apc.enable_cli'
    else
        echo "---------> The php.ini was not found"
        exit 1
    fi

# ------------------------------- Composer Installation -----------------------------------

pushd ${BUILD_DIR}

    if [ -f "composer.json" ]
    then
            echo "-----> Installing dependencies using Composer"
            GIT_DIR_ORIG=${GIT_DIR}
            unset GIT_DIR

            if [ ! -f "composer.phar" ]
            then
                    echo "Fetching composer.phar" | indent
                    if [ -f "bin/composer" ]
                    then
                        echo bin/composer | indent
                        cp bin/composer composer.phar
                    else
                        echo ${COMPOSER_URL} | indent
                        download_url ${COMPOSER_URL}
                    fi
            fi

            # ini parameters file
            if [ ! -r ${BUILD_DIR}/app/config/parameters.ini ]; then
                if [ -r ${BUILD_DIR}/app/config/parameters_prod.ini.erb ]; then
                            erb ${BUILD_DIR}/app/config/parameters_prod.ini.erb > ${BUILD_DIR}/app/config/parameters.ini
                fi
            fi

            # yml parameters file
            if [ ! -r ${BUILD_DIR}/app/config/parameters.yml ]; then
                if [ -r ${BUILD_DIR}/app/config/parameters_prod.yml.erb ]; then
                            erb ${BUILD_DIR}/app/config/parameters_prod.yml.erb > ${BUILD_DIR}/app/config/parameters.yml
                fi
            fi

            echo "-----> Composer install"
            # do the deed!
            echo "Running: php composer.phar install --prefer-dist -n --no-progress " | indent
            ${EXEC_PHP} -d "apc.enable_cli=0" composer.phar install --prefer-dist -n --no-progress | indent

            export GIT_DIR=${GIT_DIR_ORIG}
    fi

popd > /dev/null

# ------------------------------- Deploying assets based on hack conf -----------------------------------

#  - for some reason cd is neccesary
pushd ${BUILD_DIR} > /dev/null

    rm -rf app/cache/*


    #echo "-------> Stripping cache dir"
    #echo "s/`strip_slashes $BUILD_DIR`/\/app\//g" > cache_strip.sed
    #find app/cache/ -type f -print0 | xargs -0 sed -i -f cache_strip.sed --quiet
    #if grep -r $BUILD_DIR app/cache -m 1 ; then
    #    echo "----------> Error: Could still find ${BUILD_DIR} in cache"
    #    exit 1
    #fi

popd > /dev/null

# ----------------------------------------- Cleanup hacks -----------------------------------------------
    echo "-----> Cleanup hacks"
    cp $LP_DIR/conf/php.ini ${PHP_INI}

    cat ${PHP_INI}|grep date.timezone

    # Deactivating plugins from php.ini (they won't be found)
    sed -i 's/extension=\(\w*\.so\)/;extension=\1/g' ${PHP_INI}
    
    cp -v $LP_DIR/conf/php.ini ${PHP_INI}
    
    mkdir -p /app/vendor/php/etc.d
    
    cp $LP_DIR/conf/etc.d/* /app/vendor/php/etc.d
    
    if [ -n "${BLITZ_API_KEY}" ]; then
    echo "-----> Dumping blitz api key"
    echo 42 > ${BUILD_DIR}/web/${BLITZ_API_KEY}
    fi

echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting nginx"

# Override config files if provided in app.
if [ -d /app/conf ]; then

	# Symfony2 database detection
	if [ -r /app/app/config/parameters_prod.yml.erb ]; then
		erb /app/app/config/parameters_prod.yml.erb > /app/app/config/parameters.yml
	fi

	if [ -r /app/app/config/parameters_prod.ini.erb ]; then
		erb /app/app/config/parameters_prod.ini.erb > /app/app/config/parameters.ini
	fi

	mkdir -p /app/conf/nginx.d

	if [ -d /app/conf/etc.d ]; then
		cp -f /app/conf/etc.d/* /app/${PHP_PATH}/etc.d/
	fi

	if [ -r /app/conf/php-fpm.conf ]; then
		cp -f /app/conf/php-fpm.conf /app/${PHP_PATH}/etc/php-fpm.conf
	fi

	if [ -r /app/conf/php.ini ]; then
		cp -f /app/conf/php.ini /app/${PHP_PATH}/php.ini
	fi

	if [ -r /app/conf/nginx.conf.erb ]; then
		cp -f /app/conf/nginx.conf.erb /app/vendor/nginx/conf/nginx.conf.erb
	fi

	if [ -r /app/conf/fastcgi_params.erb ]; then
		cp -f /app/conf/fastcgi_params.erb /app/vendor/nginx/conf/fastcgi_params
	fi

fi

# Set correct port variable.
erb /app/vendor/nginx/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf
if [ -r $LP_DIR/conf/fastcgi_params.erb ]; then
    erb /app/vendor/nginx/conf/fastcgi_params.erb > /app/vendor/nginx/conf/fastcgi_params
fi

if [ -d /app/conf/nginx.d ]; then
	# Parse .erb into .conf.
	for f in /app/conf/nginx.d/*.erb
	do
		if [ -r "\${f}" ];
		then
			erb "\${f}" > "\${f}.conf"
		fi
	done
fi

if [ -d /app/vendor/php/etc.d ]; then
	# Parse .erb into .ini.
	for f in /app/vendor/php/etc.d/*.erb
	do
		if [ -r "\${f}" ];
		then
			erb "\${f}" > "\${f}.ini"
		fi
	done
fi

# Set NEWRELIC key
if [ "\${NEW_RELIC_LICENSE_KEY}" -a -x "/app/local/bin/newrelic-license" ]; then
	echo "NEWRELIC license setted to ${NEW_RELIC_LICENSE_KEY}"
	/app/local/bin/newrelic-license
fi

# Preserve current php-fpm.conf so that env list does
# not go out of hand across restarts.
if [ -r /app/${PHP_PATH}/etc/php-fpm.conf.current ]; then
	cp -f /app/${PHP_PATH}/etc/php-fpm.conf.current /app/${PHP_PATH}/etc/php-fpm.conf
else
	cp -f /app/${PHP_PATH}/etc/php-fpm.conf /app/${PHP_PATH}/etc/php-fpm.conf.current
fi

# Expose Heroku config vars to PHP-FPM processes
for var in \`env | cut -f1 -d=\`; do
	echo "env[\$var] = \\$\${var}" >> /app/${PHP_PATH}/etc/php-fpm.conf
done

touch /app/app/logs/error.log /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log /app/${PHP_PATH}/var/log/php-fpm.log /app/${PHP_PATH}/var/log/php-errors.log /app/local/var/log/newrelic/newrelic-daemon.log /app/local/var/log/newrelic/php_agent.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
(tail -f -n 0 /app/vendor/nginx/logs/*.log /app/${PHP_PATH}/var/log/*.log /app/local/var/log/newrelic/*.log &)


if [ "\${NEW_RELIC_LICENSE_KEY}" -a ! -f /app/local/NEWRELIC_VERSION ]; then
	/app/local/bin/newrelic-daemon -c /app/local/etc/newrelic.cfg -d error
fi

echo "Warming up Cache..."

rm -rf app/cache/*

/app/${PHP_PATH}/sbin/php-fpm
/app/vendor/nginx/sbin/nginx

EOF
chmod +x boot.sh

echo "-----> Done with compile"
